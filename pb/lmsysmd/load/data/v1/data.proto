syntax = "proto3";

package lmsysmd.load.data.v1;

import "buf/validate/validate.proto";
import "lmsysmd/load/model/v1/model.proto";

service DataService {
  rpc BatchCreateData(BatchCreateDataRequest) returns (BatchCreateDataResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

message BatchCreateDataRequest {
  string google_sheet_url = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.uri = true,
    (buf.validate.field).string.min_len = 2,
    (buf.validate.field).string.max_len = 128
  ];
}

message BatchCreateDataResponse {}

// The fields are based on the columns in https://docs.google.com/spreadsheets/d/1MWVXNHXgLdTHHTVmpi9HmQ3DRV6uU3CWfHdxshUeEUU/edit?gid=0#gid=0.
message Data {
  uint32 experiment_id = 1 [(buf.validate.field).required = true];
  lmsysmd.load.model.v1.ModelId model_id = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).enum.defined_only = true
  ];
  enum CaseCategory {
    CASE_CATEGORY_UNSPECIFIED = 0;
    CASE_CATEGORY_BREAST = 1;
    CASE_CATEGORY_CHEST = 2;
    CASE_CATEGORY_CARDIOVASCULAR = 3;
    CASE_CATEGORY_GASTROINTESTINAL = 4;
    CASE_CATEGORY_GENITOURINARY = 5;
    CASE_CATEGORY_HEAD_AND_NECK = 6;
    CASE_CATEGORY_MUSCULOSKELETAL = 7;
    CASE_CATEGORY_NEURORADIOLOGY = 8;
    CASE_CATEGORY_OBSTETRIC = 9;
    CASE_CATEGORY_PEDIATRIC = 10;
  }
  CaseCategory case_category = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).enum.defined_only = true
  ];
  uint32 caseset_id = 4 [(buf.validate.field).required = true];
  string ground_truth = 5 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 2,
    (buf.validate.field).string.max_len = 128
  ];
  enum Prompt {
    PROMPT_UNSPECIFIED = 0;
    PROMPT_DIFFERENTIAL_DIAGNOSIS_TOP_5_RANKED_LIST = 1;
  }
  Prompt prompt = 6 [
    (buf.validate.field).required = true,
    (buf.validate.field).enum.defined_only = true
  ];
  string prompt_content = 7 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 2,
    (buf.validate.field).string.max_len = 512
  ];
  string case_input_content = 8 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 2,
    (buf.validate.field).string.max_len = 8192
  ];
  enum CaseInstruction {
    CASE_INSTRUCTION_UNSPECIFIED = 0;
    CASE_INSTRUCTION_DIFFERENTIAL_DIAGNOSIS = 1;
  }
  CaseInstruction case_instruction = 9 [
    (buf.validate.field).required = true,
    (buf.validate.field).enum.defined_only = true
  ];
  repeated string results = 10 [
    (buf.validate.field).required = true,
    (buf.validate.field).repeated.min_items = 5,
    (buf.validate.field).repeated.max_items = 5,
    (buf.validate.field).repeated.items.string.min_len = 2,
    (buf.validate.field).repeated.items.string.max_len = 256
  ];
  // TODO(sunb26): Add labels once the labels are finalized.
  enum CaseLabel {
    CASE_LABEL_UNSPECIFIED = 0;
    CASE_LABEL_HISTORY = 1;
    CASE_LABEL_FINDINGS = 2;
    CASE_LABEL_HISTORY_AND_FINDINGS = 3;
  }
  repeated CaseLabel case_labels = 11 [
    (buf.validate.field).repeated.max_items = 5,
    (buf.validate.field).repeated.items.enum.defined_only = true
  ];
}
